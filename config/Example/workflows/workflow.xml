<workflow name="%System%_%Source%_Workflow">
    <!-- specify any alternate database name variable instead of the global variable defined in Variables.bat file
    <variable name="alternateSourceDatabase" value="%SourceDatabase%"/>
    -->
    <variable name="incomingPath" value="%DataPath%\%FolderName%\incoming"/>
    <variable name="workPath" value="%DataPath%\%FolderName%\work"/>
    <variable name="archivePath" value="%DataPath%\%FolderName%\archive"/>
    <variable name="filenamePattern" value="[0-9]{5}_Collisions_.*\.csv"/>
    <!-- enumeration of on_success_action codes -->
    <variable name="quitWithSuccess" value="1"/>
    <variable name="quitWithFailure" value="2"/>
    <variable name="goToTheNextStep" value="3"/>
    <variable name="goToStepWithId" value="4"/>
    <!-- specify a query timeout if needed for the bulk insert, otherwise leave 0 for no timeout (0 only works in 2012 and later) -->
    <variable name="queryTimeout" value="0"/>
    <!-- specify a proxy name for PowerShell in order to run scripts as a proxy, which is mapped to a credential in SQL Server -->
    <!--
    <variable name="powerShellProxyName" value=""/>
    -->
    <!-- specify an execution policy for PowerShell scripts so that they will run from SQL Server Agent without being blocked (Note: this was changed in the registry for SqlPs
    <variable name="powerShellExecutionPolicy" value="Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process -Force;"/>
    -->
    <!-- recurse directories when searching for files, blank out if no extra options are needed -->
    <variable name="extraOptions" value="-Recurse"/>
    <!-- common parameters that all jobs need for logging to metadata -->
    <variable name="parameters" value="@agentJobId = $(ESCAPE_NONE(JOBID)), @agentStepId = $(ESCAPE_NONE(STEPID))"/>
    <job name="%System%_%Source%_Staging">
        <!-- example of how to specify a table name variable if needed or another variable as well
        <variable name="tableName" value="MyTable"/>
        -->
        <!-- use the following line if a powershell proxy is used
        <jobstep name="Check for and move files" subsystem="PowerShell" proxy_name="%powerShellProxyName%" on_success_action="%goToTheNextStep%">-->
        <jobstep name="Check for and move files" subsystem="PowerShell" on_success_action="%goToTheNextStep%">
            $files = Get-ChildItem -Path "%incomingPath%" | Where-Object {$_.Name -match "%filenamePattern%"};
            If ($files.Length -eq 0) {
              Throw "No matching files were found in %incomingPath%";
            }
            Else {
              ForEach ($file in $files) {
                $fullFileName = $file.FullName;
                Move-Item -Path $fullFileName -Destination "%workPath%" -Force;
                Write-Output "Moved file: $fullFileName to %workPath%";
              }
            };
        </jobstep>
        <jobstep name="Create raw table" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_CreateRawTable %parameters%
        </jobstep>
        <!-- replace the above job step with the following one when using 'bulk' splitting -->
        <!--
        <jobstep name="Create raw split table" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_CreateRawSplitTable %parameters%
        </jobstep>
        -->
        <jobstep name="Create insert view" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_CreateInsertView %parameters%
        </jobstep>
        <!-- use the following line if a powershell proxy is required
        <jobstep name="Bulk insert" database_name="%SourceDatabase%" subsystem="PowerShell" proxy_name="%powerShellProxyName%" on_success_action="%goToTheNextStep%">-->
        <jobstep name="Bulk insert" database_name="%SourceDatabase%" subsystem="PowerShell" on_success_action="%goToTheNextStep%">
            $files = Get-ChildItem -Path "%workPath%" %extraOptions% | Where-Object {$_.Name -match "%filenamePattern%"};
            If ($files.Length -eq 0) {
              Throw "No matching files were found in %workPath%";
            }
            Else {
              ForEach ($file in $files) {
                $fullFileName = $file.FullName;
                $modifiedDate = $file.LastWriteTime;
                Invoke-Sqlcmd "EXEC %SourceSchema%.%System%_%Source%_BulkInsert `"$fullFileName`", `"$modifiedDate`", %parameters%" -Database "%SourceDatabase%" -ErrorAction Stop -QueryTimeout %queryTimeout%;
                Write-Output "Loaded file: $fullFileName";
                Move-Item -Path $fullFileName -Destination "%archivePath%" -Force;
                Write-Output "Moved file: $fullFileName to %archivePath%";
              }
            };
        </jobstep>
        <jobstep name="Create split views" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_CreateSplitViews %parameters%
        </jobstep>
        <jobstep name="Create error views" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_CreateErrorViews %parameters%
        </jobstep>
        <jobstep name="Create typed tables" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_CreateTypedTables %parameters%
        </jobstep>
        <jobstep name="Split raw into typed" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.%System%_%Source%_SplitRawIntoTyped %parameters%
        </jobstep>
        <jobstep name="Add keys to typed" database_name="%SourceDatabase%" subsystem="TSQL">
            EXEC %SourceSchema%.%System%_%Source%_AddKeysToTyped %parameters%
        </jobstep>
    </job>
    <job name="%System%_%Source%_Loading">
        <!-- ST_Street -->
        <jobstep name="Load streets" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.[lST_Street__%System%_%Source%_Collision_Typed] %parameters%
        </jobstep>
        <!-- IS_Intersection pass 1 -->
        <jobstep name="Load intersection pass 1" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.[lIS_Intersection__%System%_%Source%_Collision_Typed__1] %parameters%
        </jobstep>
        <!-- ST_intersecting_IS_of_ST_crossing -->
        <jobstep name="Load ST ST IS tie" database_name="%SourceDatabase%" subsystem="TSQL" on_success_action="%goToTheNextStep%">
            EXEC %SourceSchema%.[lST_intersecting_IS_of_ST_crossing__%System%_%Source%_Collision_Typed] %parameters%
        </jobstep>
        <!-- IS_Intersection pass 2 -->
        <jobstep name="Load intersection pass 2" database_name="%SourceDatabase%" subsystem="TSQL">
            EXEC %SourceSchema%.[lIS_Intersection__%System%_%Source%_Collision_Typed__2] %parameters%
        </jobstep>
    </job>
</workflow>
